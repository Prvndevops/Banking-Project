pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M2_HOME"
    }

    stages {
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/Prvndevops/Banking-Project.git'

                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"

            }        
        }
       stage('Generate Test Reports') {
           steps {
               publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '/var/lib/jenkins/workspace/BankingProject/target/surefire-reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                    }
            }
       stage('Create Docker Image') {
           steps {
               sh 'docker build -t Prvndevops/banking-project-demo:1.0 .'
                    }
                }
         stage('Docker Login') {
            steps {
                script {
                    // Use a temporary file to avoid echoing the password directly
                    writeFile file: 'password.txt', text: "${dockerpassword}"
                    sh 'cat password.txt | docker login -u Prvndevops --password-stdin'
                    // Clean up the temporary file
                    sh 'rm -f password.txt'
                                   }
                        }
                }
       stage('Push-Image') {
           steps {
               sh 'docker push Prvndevops/banking-project-demo:1.0'
                     }
                }
       stage('Config & Deployment') {
            steps {
                
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AWS-ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    dir('terraform-files') {
                    sh 'sudo chmod 600 jenkinskey.pem'
                    sh 'terraform init'
                    sh 'terraform validate'
                    sh 'terraform apply --auto-approve'
}
    }
}
}
}
}
